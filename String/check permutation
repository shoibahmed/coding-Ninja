For a given two strings, 'str1' and 'str2', check whether they are a permutation of each other or not.
Permutations of each other
Two strings are said to be a permutation of each other when either of the string's characters can be rearranged so that it becomes identical to the other one.

Example: 
str1= "sinrtg" 
str2 = "string"

The character of the first string(str1) can be rearranged to form str2 and hence we can say that the given strings are a permutation of each other.
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

public class Solution {

	public static boolean isPermutation(String str1, String str2) {
		//Your code goes here
		if(str1.length() != str2.length()){
			return false;
		}
		char Str1[] = str1.toCharArray();
		char Str2[] = str2.toCharArray();
		char temp;
		boolean res= true;
		sorting string 1 as array
		 for(int i=0 ; i<str1.length() ; i++){
			for(int j=i+1; j<str1.length() ; j++){
				if(Str1[i]>Str1[j]){
					temp=Str1[j];
					Str1[j]=Str1[i];
					Str1[i]=temp;
				}
			}
		}
		//sorting string 2 as array
		for(int i=0 ; i<str2.length() ; i++){
			for(int j=i+1; j<str2.length() ; j++){
				if(Str2[i]>Str2[j]){
					temp=Str2[j];
					Str2[j]=Str2[i];
					Str2[i]=temp;
				}
			}
		} 
		
		for(int k=0 ;k<Str1.length ; k++){
			if(Str1[k]!=Str2[k]){
				return false;
			}
		}
		
		return res;		
	}

}
